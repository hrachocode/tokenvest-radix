import { useAccounts } from '@/hooks/useAccounts';
import { useConnected } from '@/hooks/useConnected';
import { usePersona } from '@/hooks/usePersona';
import { useRequestData } from '@/hooks/useRequestData';
import { useSendTransaction } from '@/hooks/useSendTransaction';
import { Button, Typography } from '@mui/material';
import Head from 'next/head'
import { Fragment } from 'react';



export default function Home() {
    const accounts = useAccounts();
    const persona = usePersona();
    const requestData = useRequestData();
    const sendTransaction = useSendTransaction();
    const connected = useConnected();

    const handleRequest = () =>
        requestData({
            accounts: { quantifier: "exactly", quantity: 2, oneTime: true },
        }).map(({ accounts }) => {
            alert(`Got wallet response!
        ${JSON.stringify(accounts, null, 2)}`);
        })

    const handleTransaction = () =>
        sendTransaction(`
CALL_METHOD ComponentAddress("account_tdx_b_1pzfkm2ycejjvr3ae8gxwjfx2t65hmj9j4hnkvw3h9xpq9qu4tu")
    "withdraw_by_amount"
    Decimal("5") ResourceAddress("resource_tdx_b_1qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq8z96qp");
TAKE_FROM_WORKTOP_BY_AMOUNT
    Decimal("5") ResourceAddress("resource_tdx_b_1qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq8z96qp")
    Bucket("bucket1");
CALL_METHOD
ComponentAddress("component_tdx_b_1q2yyjgc76esnkuwhz5rnzlp47cyrxt9jysgzqt8s96fqem5gza")
    "invest"
    Bucket("bucket1")
    "walter";
CALL_METHOD  ComponentAddress("account_tdx_b_1pzfkm2ycejjvr3ae8gxwjfx2t65hmj9j4hnkvw3h9xpq9qu4tu")
    "deposit_batch"
    Expression("ENTIRE_WORKTOP");
`);



    return (
        <>
            <Head>
                <title>Create Next App</title>
                <meta name="description" content="Generated by create next app" />
                <meta name="viewport" content="width=device-width, initial-scale=1" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <>
                <Typography> Persona: {persona?.label}</Typography>
                <Typography>Accounts Count: {accounts?.length}</Typography>
                {accounts?.map((item, index) => {
                    return (
                        <Fragment key={index + 1}>
                            <Typography>{index + 1}. {item.label}</Typography>
                        </Fragment>
                    )
                })}
                <Typography> Connected status: {connected.toString().toUpperCase()}</Typography>
                <Button onClick={handleRequest}>Send Request</Button>
                <Button onClick={handleTransaction}>Send Transaction</Button>
            </>
        </>
    )
}
