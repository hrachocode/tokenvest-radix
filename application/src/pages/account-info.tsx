import { useAccounts } from '@/hooks/useAccounts';
import { useConnected } from '@/hooks/useConnected';
import { usePersona } from '@/hooks/usePersona';
import { useRequestData } from '@/hooks/useRequestData';
import { useSendTransaction } from '@/hooks/useSendTransaction';
import Head from 'next/head'
import { Fragment } from 'react';



export default function AccountInfo() {
    const accounts = useAccounts();
    const persona = usePersona();
    const requestData = useRequestData();
    const sendTransaction = useSendTransaction();
    const connected = useConnected();

    const handleRequest = () =>
        requestData({
            accounts: { quantifier: "exactly", quantity: 2, oneTime: true },
        }).map(({ accounts }) => {
            alert(`Got wallet response!
        ${JSON.stringify(accounts, null, 2)}`);
        })

    const handleTransaction = () =>
        sendTransaction(`
CREATE_FUNGIBLE_RESOURCE
18u8
Map<String, String>(
"name", "MyResource",                                        # Resource Name
"symbol", "RSRC",                                            # Resource Symbol
"description", "A very innovative and important resource"    # Resource Description
) 
Map<Enum, Tuple>(
Enum("ResourceMethodAuthKey::Withdraw"), Tuple(Enum("AccessRule::AllowAll"), Enum("AccessRule::DenyAll")),
Enum("ResourceMethodAuthKey::Deposit"), Tuple(Enum("AccessRule::AllowAll"), Enum("AccessRule::DenyAll"))
)
Some(Decimal("500000"));

CALL_METHOD
ComponentAddress("${accounts[0].address}") 
"deposit_batch"
Expression("ENTIRE_WORKTOP");
`)


    return (
        <>
            <Head>
                <title>Create Next App</title>
                <meta name="description" content="Generated by create next app" />
                <meta name="viewport" content="width=device-width, initial-scale=1" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <>
                <p> Persona: {persona?.label}</p>
                <p>Accounts Count: {accounts?.length}</p>
                {accounts?.map((item, index) => {
                    return (
                        <Fragment key={index + 1}>
                            <p>{index + 1}. {item.label}</p>
                        </Fragment>
                    )
                })}
                <p> Connected status: {connected.toString()}</p>
                <button onClick={handleRequest}>Send Request</button>
                <button onClick={handleTransaction}>Send Transaction</button>
            </>
        </>
    )
}
